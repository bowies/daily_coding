package programmers

class 하샤드_수_Kotlin_230711 {

    fun solution(x: Int): Boolean {
        var 자릿수의합 = 0
        var 하샤드수 = x

        while (하샤드수 > 0) {
            자릿수의합 += 하샤드수 % 10 // 마지막 자릿수를 구해서 sum에 더함
            하샤드수 /= 10 // 마지막 자릿수를 제거
        }

        return (x % 자릿수의합 == 0)
    }

    fun solution_short(x: Int): Boolean {
        val answer = x.toString().map { it.toString().toInt() }.sum()
        return x % answer == 0
    }


    /*
    x를 toString() 함수를 사용하여 정수 x를 문자열로 변환합니다.
    그리고 map 함수를 사용하여 각 문자를 정수로 변환하여 리스트를 생성합니다.
    sum 함수를 호출하여 리스트의 합을 계산하여 sum 변수에 할당합니다.

    마지막으로, x % sum == 0를 통해 자릿수의 합으로 x가 나누어지는지 확인하여 결과를 반환합니다.
    반환된 결과는 주어진 문제의 조건에 따라 하샤드 수인지 아닌지를 나타냅니다.
     */


    fun solution_faster(x: Int): Boolean {
        return x % x.toString().fold(0){acc, c -> acc + c.toInt() - 48} == 0
    }

    /*
    주어진 Kotlin 코드는 `fold` 함수를 사용하여 주어진 수 `x`의 각 자릿수를 합산하는 방법으로 하샤드 수 여부를 확인합니다.

    위 코드는 주어진 수 `x`가 하샤드 수인지 아닌지를 검사하여 결과를 반환합니다.

    1. `x.toString()`을 사용하여 정수 `x`를 문자열로 변환합니다.
    2. `fold(0) { acc, c -> acc + c.toInt() - 48 }`를 통해 문자열의 각 문자에 대해 fold 연산을 수행합니다.
       - `fold` 함수는 초기값(여기서는 0)과 클로저를 받아서 문자열의 각 문자를 하나씩 순회하며 클로저를 적용합니다.
       - `acc`는 현재까지의 합산 값이며, `c`는 현재 순회 중인 문자입니다.
       - `c.toInt() - 48`을 통해 문자의 ASCII 코드 값을 정수 값으로 변환합니다. (ASCII 코드에서 숫자 0의 값은 48)
       - `acc`에 변환된 정수 값을 더하여 다음 순회로 넘겨줍니다.
       - 순회가 완료되면 최종적인 합산 값이 반환됩니다.
    3. `x % foldResult == 0`를 통해 주어진 수 `x`를 합산된 값으로 나누었을 때 나머지가 0인지 확인합니다.
       - 나머지가 0이면 `true`를 반환하여 주어진 수 `x`가 하샤드 수라고 판단합니다.
       - 그렇지 않으면 `false`를 반환하여 주어진 수 `x`가 하샤드 수가 아니라고 판단합니다.

    따라서 주어진 Kotlin 코드는 주어진 문제를 해결하기 위해 작성된 방법 중 하나입니다.
    이 코드는 `fold` 함수를 사용하여 문자열의 각 자릿수를 합산하는 방식으로 하샤드 수 여부를 검사합니다.
     */
}